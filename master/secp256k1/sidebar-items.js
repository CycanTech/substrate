initSidebarItems({"constant":[["ONE_KEY","The number 1 encoded as a secret key"]],"enum":[["All","Represents the set of all capabilities."],["Error","An ECDSA error"],["SignOnly","Represents the set of capabilities needed for signing."],["VerifyOnly","Represents the set of capabilities needed for verification."]],"externcrate":[["rand",""],["secp256k1_sys",""]],"mod":[["constants","Constants"],["ecdh","ECDH"],["ecdsa","Structs and functionality related to the ECDSA signature algorithm."],["global","Module implementing a singleton pattern for a global `Secp256k1` context"],["schnorr","schnorrsig"],["schnorrsig","Schnorr Sig related methods"]],"static":[["SECP256K1","A global, static context to avoid repeatedly creating contexts where one can’t be passed"]],"struct":[["AllPreallocated","Represents the set of all capabilities with a user preallocated memory."],["KeyPair","Opaque data structure that holds a keypair consisting of a secret and a public key."],["Message","A (hashed) message input to an ECDSA signature"],["Parity","Opaque type used to hold the parity passed between FFI function calls."],["PublicKey","A Secp256k1 public key, used for verification of signatures"],["Secp256k1","The secp256k1 engine, used to execute all signature operations"],["SecretKey","Secret 256-bit key used as `x` in an ECDSA signature"],["SignOnlyPreallocated","Represents the set of capabilities needed for signing with a user preallocated memory."],["VerifyOnlyPreallocated","Represents the set of capabilities needed for verification with a user preallocated memory."],["XOnlyPublicKey","A x-only public key, used for verification of Schnorr signatures and serialized according to BIP-340."]],"trait":[["Context","A trait for all kinds of Context’s that Lets you define the exact flags and a function to deallocate memory. It shouldn’t be possible to implement this for types outside this crate."],["Signing","Marker trait for indicating that an instance of `Secp256k1` can be used for signing."],["ThirtyTwoByteHash","Trait describing something that promises to be a 32-byte random number; in particular, it has negligible probability of being zero or overflowing the group order. Such objects may be converted to `Message`s without any error paths."],["Verification","Marker trait for indicating that an instance of `Secp256k1` can be used for verification."]],"type":[["Signature","backwards compatible re-export of ecdsa signatures"]]});